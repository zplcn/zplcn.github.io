[{"id":0,"href":"/docs/project/prj1/","title":"risc-V内核","section":"项目记录","content":"这是cpu内核的spec\n"},{"id":1,"href":"/docs/project/","title":"项目记录","section":"Docs","content":" 项目记录 # 这个页面用于记录做过的项目，以及正在做的项目。 记录包括：\n规格定义：描述项目的大致信息和特点 相关知识：描述相关的应用知识与查阅的资料 实现方法：用什么方式实现，思路上什么 总结：总结项目中遇到的问题与值得改进的地方 当前项目 # 基于c++的文本编辑器 基于riscv的内核设计与验证 aes128算法的实现与综合 "},{"id":2,"href":"/docs/learn/systemverilog/","title":"system verilog","section":"学习记录","content":"这里对我sv的学习进行记录\n"},{"id":3,"href":"/docs/learn/","title":"学习记录","section":"Docs","content":"这里存放我学习过的知识总结，主要是避免忘记，也用于分享，减少他者的入坑难度\n"},{"id":4,"href":"/docs/learn/Github_Page/","title":"静态个人网站搭建","section":"学习记录","content":" 静态个人网站搭建 # 简单介绍 # 零成本搭建个人网站，存放文档与blog，用于知识分享与自我展示，这里我将介绍如何通过Github Page搭建个人网站。\n什么是静态网站 # 通常我们访问的一些大型网站，往往带有数据的交互，比如你登陆你的个人账号，数据将会发送到服务端，服务端处理后将登陆结构返回给个人电脑。对于静态网页，用于存放一些固定不变的数据，且很少能进行数据交互。\n尽管如此，静态网站也有其优点，也就是其搭建简单，不需要服务器，不需要太多前置知识，适合用于blog与文档分享的场景，让我们能够专注于文档的编写。\n前置准备 # 如果你准备好了搭建一个静态网站，以下前置工作可能需要进行。\n注册Github账号 绑定账号和本地 熟悉使用markdown编写文档 熟悉hugo hugo安装 # hugo是一个静态网站生成平台，其根据你的配置、内容，自动生成一个页面。相比于我们手动去编写html文件，无疑更加有效率。\n安装方法 # Macos 在Macos平台下，推荐使用brew安装 brew install hugo\nLinux 在Linux平台下，推荐使用apt安装 apt install hugo\n创建一个静态网站 # 使用hugo new site \u0026lt;dirname\u0026gt;即可创建一个静态网站文件夹 进入\n"},{"id":5,"href":"/docs/project/prj2/","title":"aes128实现与综合","section":"项目记录","content":"这里是aes128的实现spec\n"},{"id":6,"href":"/docs/posts/","title":"个人博客","section":"Docs","content":"hello world\n"},{"id":7,"href":"/posts/","title":"学习记录","section":"Introduction","content":"hello world\n"}]
[{"id":0,"href":"/docs/project/prj1/","title":"risc-V内核","section":"项目记录","content":"这是cpu内核的spec\n"},{"id":1,"href":"/docs/project/","title":"项目记录","section":"Docs","content":" 项目记录 # 这个页面用于记录做过的项目，以及正在做的项目。 记录包括：\n规格定义：描述项目的大致信息和特点 相关知识：描述相关的应用知识与查阅的资料 实现方法：用什么方式实现，思路上什么 总结：总结项目中遇到的问题与值得改进的地方 当前项目 # 基于c++的文本编辑器 基于riscv的内核设计与验证 aes128算法的实现与综合 "},{"id":2,"href":"/docs/learn/systemverilog/","title":"system verilog","section":"学习记录","content":"这里对我sv的学习进行记录\n"},{"id":3,"href":"/docs/learn/","title":"学习记录","section":"Docs","content":"这里存放我学习过的知识总结，主要是避免忘记，也用于分享，减少他者的入坑难度\n"},{"id":4,"href":"/docs/learn/Github_Page/","title":"静态个人网站搭建","section":"学习记录","content":" 静态个人网站搭建 # 简单介绍 # 零成本搭建个人网站，存放文档与blog，用于知识分享与自我展示，这里我将介绍如何通过Github Page搭建个人网站。\n什么是静态网站 # 通常我们访问的一些大型网站，往往带有数据的交互，比如你登陆你的个人账号，数据将会发送到服务端，服务端处理后将登陆结构返回给个人电脑。对于静态网页，用于存放一些固定不变的数据，且很少能进行数据交互。\n尽管如此，静态网站也有其优点，也就是其搭建简单，不需要服务器，不需要太多前置知识，适合用于blog与文档分享的场景，让我们能够专注于文档的编写。\n前置准备 # 如果你准备好了搭建一个静态网站，以下前置工作可能需要进行。\n注册Github账号 绑定账号和本地 熟悉使用markdown编写文档 熟悉hugo hugo安装 # hugo是一个静态网站生成平台，其根据你的配置、内容，自动生成一个页面。相比于我们手动去编写html文件，无疑更加有效率。\n安装方法 # Macos 在Macos平台下，推荐使用brew安装:\nbrew install hugo\nLinux 在Linux平台下，推荐使用apt安装:\napt install hugo\n创建一个静态网站 # 使用hugo new site \u0026lt;dirname\u0026gt;即可创建一个静态网站文件夹 首先进入一个文件夹，比如我创建的路径为mydoc\nhugo new site mydoc\n注意如果你使用的是Macos系统，由于其对大小写不敏感，可能导致一些问题，建议新建一个大小写敏感的磁盘用来搭建这个静态网页。\n于是mydoc被创建，其中有以下文件:\narchetypes\tcontent\thugo.toml\tlayouts\tthemes assets\tdata\ti18n\tstatic 使用git init将当前目录初始化为git目录\ncontent用于存放我们的markdown文档，archetypes用于存放新建页面的模版，themes用于存放下载的主题，hugo.toml则是网页搭建的初始配置，static存放一些静态数据，比如图片。\n此时打开hugo的 可选主题,在其中选择自己喜欢的主题，这里我选择了book主题，也以此作为案例\n打开book下载页面，提示使用git submodule add https://github.com/alex-shpak/hugo-book themes/hugo-book进行下载 输入后等待一段时间即可完成\n下载完成后，主题存放在themes中 themes/hugo-book/exampleSite是该主题的示例网站，我们可以在其基础上改动 cp -rf themes/hugo-book/exampleSite . 此时执行hugo serve -D即可打开网站的预览,在浏览器上输入127.0.0.1:1313即可查看 /Users/plz/Desktop/截屏2025-02-09\\ 21.55.36.png\n"},{"id":5,"href":"/docs/project/prj2/","title":"aes128实现与综合","section":"项目记录","content":" aes128 ECB加密方向RTL实现与综合 # 本文章将致力于AES128 ECB的实现与综合，其中AES128模块将具有以下特征：\n仅支持加密方向 支持加密轮数(10~16)选择 提供Clock gating，能在不用时停止该时钟 AES128简介 # AES128是一种双向加密算法，其能对输入的128位明文(plain)和128位密钥(key),生成128为的密文(cipher)。也可以通过key和cipher反向得到plain。其加密过程基于几个步骤(移位、S盒替换、列混淆、列相加)，执行一次这些步骤称为一轮。一般为了得到最终的cipher，AES128会执行10～16轮。\n接下来，我将介绍AES128加密过程的每一个步骤；\n行位移 # S盒替换 # 列混淆 # 轮密钥相加 # 轮密钥计算 # RTL实现 # clock_gating模块 # module clock_gating( input clk_in; input clk_en; input rstn; output reg clk_out); always@(posedge clk or negedge rstn) if(~rstn) clk_out \u0026lt;= 1\u0026#39;b0; else if(clk_en) clk_out \u0026lt;= clk_in; endmodule 列混合模块 # module MixColumns(x, y);//列混合 input [31:0] x; output [31:0] y; wire [7:0] a3, a2, a1, a0, b3, b2, b1, b0; assign a3 = x[31:24]; assign a2 = x[23:16]; assign a1 = x[15: 8]; assign a0 = x[ 7: 0]; assign b3 = a3 ^ a2; assign b2 = a2 ^ a1; assign b1 = a1 ^ a0; assign b0 = a0 ^ a3; assign y = { a2[7] ^ b1[7] ^ b3[6], a2[6] ^ b1[6] ^ b3[5], a2[5] ^ b1[5] ^ b3[4], a2[4] ^ b1[4] ^ b3[3] ^ b3[7], a2[3] ^ b1[3] ^ b3[2] ^ b3[7], a2[2] ^ b1[2] ^ b3[1], a2[1] ^ b1[1] ^ b3[0] ^ b3[7], a2[0] ^ b1[0] ^ b3[7], a3[7] ^ b1[7] ^ b2[6], a3[6] ^ b1[6] ^ b2[5], a3[5] ^ b1[5] ^ b2[4], a3[4] ^ b1[4] ^ b2[3] ^ b2[7], a3[3] ^ b1[3] ^ b2[2] ^ b2[7], a3[2] ^ b1[2] ^ b2[1], a3[1] ^ b1[1] ^ b2[0] ^ b2[7], a3[0] ^ b1[0] ^ b2[7], a0[7] ^ b3[7] ^ b1[6], a0[6] ^ b3[6] ^ b1[5], a0[5] ^ b3[5] ^ b1[4], a0[4] ^ b3[4] ^ b1[3] ^ b1[7], a0[3] ^ b3[3] ^ b1[2] ^ b1[7], a0[2] ^ b3[2] ^ b1[1], a0[1] ^ b3[1] ^ b1[0] ^ b1[7], a0[0] ^ b3[0] ^ b1[7], a1[7] ^ b3[7] ^ b0[6], a1[6] ^ b3[6] ^ b0[5], a1[5] ^ b3[5] ^ b0[4], a1[4] ^ b3[4] ^ b0[3] ^ b0[7], a1[3] ^ b3[3] ^ b0[2] ^ b0[7], a1[2] ^ b3[2] ^ b0[1], a1[1] ^ b3[1] ^ b0[0] ^ b0[7], a1[0] ^ b3[0] ^ b0[7]}; endmodule S盒替换 # S盒代码 module sbox( input [7:0] sbox_in, output [7:0] sbox_out ); wire [7:0] sbox_comb [255:0]; //S盒 sbox_out= sbox_comb[addr]; assign sbox_comb [8\u0026#39;h00] \u0026lt;= 8\u0026#39;h63 ; assign sbox_comb [8\u0026#39;h01] \u0026lt;= 8\u0026#39;h7c ; assign sbox_comb [8\u0026#39;h02] \u0026lt;= 8\u0026#39;h77 ; assign sbox_comb [8\u0026#39;h03] \u0026lt;= 8\u0026#39;h7b ; assign sbox_comb [8\u0026#39;h04] \u0026lt;= 8\u0026#39;hf2 ; assign sbox_comb [8\u0026#39;h05] \u0026lt;= 8\u0026#39;h6b ; assign sbox_comb [8\u0026#39;h06] \u0026lt;= 8\u0026#39;h6f ; assign sbox_comb [8\u0026#39;h07] \u0026lt;= 8\u0026#39;hc5 ; assign sbox_comb [8\u0026#39;h08] \u0026lt;= 8\u0026#39;h30 ; assign sbox_comb [8\u0026#39;h09] \u0026lt;= 8\u0026#39;h01 ; assign sbox_comb [8\u0026#39;h0a] \u0026lt;= 8\u0026#39;h67 ; assign sbox_comb [8\u0026#39;h0b] \u0026lt;= 8\u0026#39;h2b ; assign sbox_comb [8\u0026#39;h0c] \u0026lt;= 8\u0026#39;hfe ; assign sbox_comb [8\u0026#39;h0d] \u0026lt;= 8\u0026#39;hd7 ; assign sbox_comb [8\u0026#39;h0e] \u0026lt;= 8\u0026#39;hab ; assign sbox_comb [8\u0026#39;h0f] \u0026lt;= 8\u0026#39;h76 ; assign sbox_comb [8\u0026#39;h10] \u0026lt;= 8\u0026#39;hca ; assign sbox_comb [8\u0026#39;h11] \u0026lt;= 8\u0026#39;h82 ; assign sbox_comb [8\u0026#39;h12] \u0026lt;= 8\u0026#39;hc9 ; assign sbox_comb [8\u0026#39;h13] \u0026lt;= 8\u0026#39;h7d ; assign sbox_comb [8\u0026#39;h14] \u0026lt;= 8\u0026#39;hfa ; assign sbox_comb [8\u0026#39;h15] \u0026lt;= 8\u0026#39;h59 ; assign sbox_comb [8\u0026#39;h16] \u0026lt;= 8\u0026#39;h47 ; assign sbox_comb [8\u0026#39;h17] \u0026lt;= 8\u0026#39;hf0 ; assign sbox_comb [8\u0026#39;h18] \u0026lt;= 8\u0026#39;had ; assign sbox_comb [8\u0026#39;h19] \u0026lt;= 8\u0026#39;hd4 ; assign sbox_comb [8\u0026#39;h1a] \u0026lt;= 8\u0026#39;ha2 ; assign sbox_comb [8\u0026#39;h1b] \u0026lt;= 8\u0026#39;haf ; assign sbox_comb [8\u0026#39;h1c] \u0026lt;= 8\u0026#39;h9c ; assign sbox_comb [8\u0026#39;h1d] \u0026lt;= 8\u0026#39;ha4 ; assign sbox_comb [8\u0026#39;h1e] \u0026lt;= 8\u0026#39;h72 ; assign sbox_comb [8\u0026#39;h1f] \u0026lt;= 8\u0026#39;hc0 ; assign sbox_comb [8\u0026#39;h20] \u0026lt;= 8\u0026#39;hb7 ; assign sbox_comb [8\u0026#39;h21] \u0026lt;= 8\u0026#39;hfd ; assign sbox_comb [8\u0026#39;h22] \u0026lt;= 8\u0026#39;h93 ; assign sbox_comb [8\u0026#39;h23] \u0026lt;= 8\u0026#39;h26 ; assign sbox_comb [8\u0026#39;h24] \u0026lt;= 8\u0026#39;h36 ; assign sbox_comb [8\u0026#39;h25] \u0026lt;= 8\u0026#39;h3f ; assign sbox_comb [8\u0026#39;h26] \u0026lt;= 8\u0026#39;hf7 ; assign sbox_comb [8\u0026#39;h27] \u0026lt;= 8\u0026#39;hcc ; assign sbox_comb [8\u0026#39;h28] \u0026lt;= 8\u0026#39;h34 ; assign sbox_comb [8\u0026#39;h29] \u0026lt;= 8\u0026#39;ha5 ; assign sbox_comb [8\u0026#39;h2a] \u0026lt;= 8\u0026#39;he5 ; assign sbox_comb [8\u0026#39;h2b] \u0026lt;= 8\u0026#39;hf1 ; assign sbox_comb [8\u0026#39;h2c] \u0026lt;= 8\u0026#39;h71 ; assign sbox_comb [8\u0026#39;h2d] \u0026lt;= 8\u0026#39;hd8 ; assign sbox_comb [8\u0026#39;h2e] \u0026lt;= 8\u0026#39;h31 ; assign sbox_comb [8\u0026#39;h2f] \u0026lt;= 8\u0026#39;h15 ; assign sbox_comb [8\u0026#39;h30] \u0026lt;= 8\u0026#39;h04 ; assign sbox_comb [8\u0026#39;h31] \u0026lt;= 8\u0026#39;hc7 ; assign sbox_comb [8\u0026#39;h32] \u0026lt;= 8\u0026#39;h23 ; assign sbox_comb [8\u0026#39;h33] \u0026lt;= 8\u0026#39;hc3 ; assign sbox_comb [8\u0026#39;h34] \u0026lt;= 8\u0026#39;h18 ; assign sbox_comb [8\u0026#39;h35] \u0026lt;= 8\u0026#39;h96 ; assign sbox_comb [8\u0026#39;h36] \u0026lt;= 8\u0026#39;h05 ; assign sbox_comb [8\u0026#39;h37] \u0026lt;= 8\u0026#39;h9a ; assign sbox_comb [8\u0026#39;h38] \u0026lt;= 8\u0026#39;h07 ; assign sbox_comb [8\u0026#39;h39] \u0026lt;= 8\u0026#39;h12 ; assign sbox_comb [8\u0026#39;h3a] \u0026lt;= 8\u0026#39;h80 ; assign sbox_comb [8\u0026#39;h3b] \u0026lt;= 8\u0026#39;he2 ; assign sbox_comb [8\u0026#39;h3c] \u0026lt;= 8\u0026#39;heb ; assign sbox_comb [8\u0026#39;h3d] \u0026lt;= 8\u0026#39;h27 ; assign sbox_comb [8\u0026#39;h3e] \u0026lt;= 8\u0026#39;hb2 ; assign sbox_comb [8\u0026#39;h3f] \u0026lt;= 8\u0026#39;h75 ; assign sbox_comb [8\u0026#39;h40] \u0026lt;= 8\u0026#39;h09 ; assign sbox_comb [8\u0026#39;h41] \u0026lt;= 8\u0026#39;h83 ; assign sbox_comb [8\u0026#39;h42] \u0026lt;= 8\u0026#39;h2c ; assign sbox_comb [8\u0026#39;h43] \u0026lt;= 8\u0026#39;h1a ; assign sbox_comb [8\u0026#39;h44] \u0026lt;= 8\u0026#39;h1b ; assign sbox_comb [8\u0026#39;h45] \u0026lt;= 8\u0026#39;h6e ; assign sbox_comb [8\u0026#39;h46] \u0026lt;= 8\u0026#39;h5a ; assign sbox_comb [8\u0026#39;h47] \u0026lt;= 8\u0026#39;ha0 ; assign sbox_comb [8\u0026#39;h48] \u0026lt;= 8\u0026#39;h52 ; assign sbox_comb [8\u0026#39;h49] \u0026lt;= 8\u0026#39;h3b ; assign sbox_comb [8\u0026#39;h4a] \u0026lt;= 8\u0026#39;hd6 ; assign sbox_comb [8\u0026#39;h4b] \u0026lt;= 8\u0026#39;hb3 ; assign sbox_comb [8\u0026#39;h4c] \u0026lt;= 8\u0026#39;h29 ; assign sbox_comb [8\u0026#39;h4d] \u0026lt;= 8\u0026#39;he3 ; assign sbox_comb [8\u0026#39;h4e] \u0026lt;= 8\u0026#39;h2f ; assign sbox_comb [8\u0026#39;h4f] \u0026lt;= 8\u0026#39;h84 ; assign sbox_comb [8\u0026#39;h50] \u0026lt;= 8\u0026#39;h53 ; assign sbox_comb [8\u0026#39;h51] \u0026lt;= 8\u0026#39;hd1 ; assign sbox_comb [8\u0026#39;h52] \u0026lt;= 8\u0026#39;h00 ; assign sbox_comb [8\u0026#39;h53] \u0026lt;= 8\u0026#39;hed ; assign sbox_comb [8\u0026#39;h54] \u0026lt;= 8\u0026#39;h20 ; assign sbox_comb [8\u0026#39;h55] \u0026lt;= 8\u0026#39;hfc ; assign sbox_comb [8\u0026#39;h56] \u0026lt;= 8\u0026#39;hb1 ; assign sbox_comb [8\u0026#39;h57] \u0026lt;= 8\u0026#39;h5b ; assign sbox_comb [8\u0026#39;h58] \u0026lt;= 8\u0026#39;h6a ; assign sbox_comb [8\u0026#39;h59] \u0026lt;= 8\u0026#39;hcb ; assign sbox_comb [8\u0026#39;h5a] \u0026lt;= 8\u0026#39;hbe ; assign sbox_comb [8\u0026#39;h5b] \u0026lt;= 8\u0026#39;h39 ; assign sbox_comb [8\u0026#39;h5c] \u0026lt;= 8\u0026#39;h4a ; assign sbox_comb [8\u0026#39;h5d] \u0026lt;= 8\u0026#39;h4c ; assign sbox_comb [8\u0026#39;h5e] \u0026lt;= 8\u0026#39;h58 ; assign sbox_comb [8\u0026#39;h5f] \u0026lt;= 8\u0026#39;hcf ; assign sbox_comb [8\u0026#39;h60] \u0026lt;= 8\u0026#39;hd0 ; assign sbox_comb [8\u0026#39;h61] \u0026lt;= 8\u0026#39;hef ; assign sbox_comb [8\u0026#39;h62] \u0026lt;= 8\u0026#39;haa ; assign sbox_comb [8\u0026#39;h63] \u0026lt;= 8\u0026#39;hfb ; assign sbox_comb [8\u0026#39;h64] \u0026lt;= 8\u0026#39;h43 ; assign sbox_comb [8\u0026#39;h65] \u0026lt;= 8\u0026#39;h4d ; assign sbox_comb [8\u0026#39;h66] \u0026lt;= 8\u0026#39;h33 ; assign sbox_comb [8\u0026#39;h67] \u0026lt;= 8\u0026#39;h85 ; assign sbox_comb [8\u0026#39;h68] \u0026lt;= 8\u0026#39;h45 ; assign sbox_comb [8\u0026#39;h69] \u0026lt;= 8\u0026#39;hf9 ; assign sbox_comb [8\u0026#39;h6a] \u0026lt;= 8\u0026#39;h02 ; assign sbox_comb [8\u0026#39;h6b] \u0026lt;= 8\u0026#39;h7f ; assign sbox_comb [8\u0026#39;h6c] \u0026lt;= 8\u0026#39;h50 ; assign sbox_comb [8\u0026#39;h6d] \u0026lt;= 8\u0026#39;h3c ; assign sbox_comb [8\u0026#39;h6e] \u0026lt;= 8\u0026#39;h9f ; assign sbox_comb [8\u0026#39;h6f] \u0026lt;= 8\u0026#39;ha8 ; assign sbox_comb [8\u0026#39;h70] \u0026lt;= 8\u0026#39;h51 ; assign sbox_comb [8\u0026#39;h71] \u0026lt;= 8\u0026#39;ha3 ; assign sbox_comb [8\u0026#39;h72] \u0026lt;= 8\u0026#39;h40 ; assign sbox_comb [8\u0026#39;h73] \u0026lt;= 8\u0026#39;h8f ; assign sbox_comb [8\u0026#39;h74] \u0026lt;= 8\u0026#39;h92 ; assign sbox_comb [8\u0026#39;h75] \u0026lt;= 8\u0026#39;h9d ; assign sbox_comb [8\u0026#39;h76] \u0026lt;= 8\u0026#39;h38 ; assign sbox_comb [8\u0026#39;h77] \u0026lt;= 8\u0026#39;hf5 ; assign sbox_comb [8\u0026#39;h78] \u0026lt;= 8\u0026#39;hbc ; assign sbox_comb [8\u0026#39;h79] \u0026lt;= 8\u0026#39;hb6 ; assign sbox_comb [8\u0026#39;h7a] \u0026lt;= 8\u0026#39;hda ; assign sbox_comb [8\u0026#39;h7b] \u0026lt;= 8\u0026#39;h21 ; assign sbox_comb [8\u0026#39;h7c] \u0026lt;= 8\u0026#39;h10 ; assign sbox_comb [8\u0026#39;h7d] \u0026lt;= 8\u0026#39;hff ; assign sbox_comb [8\u0026#39;h7e] \u0026lt;= 8\u0026#39;hf3 ; assign sbox_comb [8\u0026#39;h7f] \u0026lt;= 8\u0026#39;hd2 ; assign sbox_comb [8\u0026#39;h80] \u0026lt;= 8\u0026#39;hcd ; assign sbox_comb [8\u0026#39;h81] \u0026lt;= 8\u0026#39;h0c ; assign sbox_comb [8\u0026#39;h82] \u0026lt;= 8\u0026#39;h13 ; assign sbox_comb [8\u0026#39;h83] \u0026lt;= 8\u0026#39;hec ; assign sbox_comb [8\u0026#39;h84] \u0026lt;= 8\u0026#39;h5f ; assign sbox_comb [8\u0026#39;h85] \u0026lt;= 8\u0026#39;h97 ; assign sbox_comb [8\u0026#39;h86] \u0026lt;= 8\u0026#39;h44 ; assign sbox_comb [8\u0026#39;h87] \u0026lt;= 8\u0026#39;h17 ; assign sbox_comb [8\u0026#39;h88] \u0026lt;= 8\u0026#39;hc4 ; assign sbox_comb [8\u0026#39;h89] \u0026lt;= 8\u0026#39;ha7 ; assign sbox_comb [8\u0026#39;h8a] \u0026lt;= 8\u0026#39;h7e ; assign sbox_comb [8\u0026#39;h8b] \u0026lt;= 8\u0026#39;h3d ; assign sbox_comb [8\u0026#39;h8c] \u0026lt;= 8\u0026#39;h64 ; assign sbox_comb [8\u0026#39;h8d] \u0026lt;= 8\u0026#39;h5d ; assign sbox_comb [8\u0026#39;h8e] \u0026lt;= 8\u0026#39;h19 ; assign sbox_comb [8\u0026#39;h8f] \u0026lt;= 8\u0026#39;h73 ; assign sbox_comb [8\u0026#39;h90] \u0026lt;= 8\u0026#39;h60 ; assign sbox_comb [8\u0026#39;h91] \u0026lt;= 8\u0026#39;h81 ; assign sbox_comb [8\u0026#39;h92] \u0026lt;= 8\u0026#39;h4f ; assign sbox_comb [8\u0026#39;h93] \u0026lt;= 8\u0026#39;hdc ; assign sbox_comb [8\u0026#39;h94] \u0026lt;= 8\u0026#39;h22 ; assign sbox_comb [8\u0026#39;h95] \u0026lt;= 8\u0026#39;h2a ; assign sbox_comb [8\u0026#39;h96] \u0026lt;= 8\u0026#39;h90 ; assign sbox_comb [8\u0026#39;h97] \u0026lt;= 8\u0026#39;h88 ; assign sbox_comb [8\u0026#39;h98] \u0026lt;= 8\u0026#39;h46 ; assign sbox_comb [8\u0026#39;h99] \u0026lt;= 8\u0026#39;hee ; assign sbox_comb [8\u0026#39;h9a] \u0026lt;= 8\u0026#39;hb8 ; assign sbox_comb [8\u0026#39;h9b] \u0026lt;= 8\u0026#39;h14 ; assign sbox_comb [8\u0026#39;h9c] \u0026lt;= 8\u0026#39;hde ; assign sbox_comb [8\u0026#39;h9d] \u0026lt;= 8\u0026#39;h5e ; assign sbox_comb [8\u0026#39;h9e] \u0026lt;= 8\u0026#39;h0b ; assign sbox_comb [8\u0026#39;h9f] \u0026lt;= 8\u0026#39;hdb ; assign sbox_comb [8\u0026#39;ha0] \u0026lt;= 8\u0026#39;he0 ; assign sbox_comb [8\u0026#39;ha1] \u0026lt;= 8\u0026#39;h32 ; assign sbox_comb [8\u0026#39;ha2] \u0026lt;= 8\u0026#39;h3a ; assign sbox_comb [8\u0026#39;ha3] \u0026lt;= 8\u0026#39;h0a ; assign sbox_comb [8\u0026#39;ha4] \u0026lt;= 8\u0026#39;h49 ; assign sbox_comb [8\u0026#39;ha5] \u0026lt;= 8\u0026#39;h06 ; assign sbox_comb [8\u0026#39;ha6] \u0026lt;= 8\u0026#39;h24 ; assign sbox_comb [8\u0026#39;ha7] \u0026lt;= 8\u0026#39;h5c ; assign sbox_comb [8\u0026#39;ha8] \u0026lt;= 8\u0026#39;hc2 ; assign sbox_comb [8\u0026#39;ha9] \u0026lt;= 8\u0026#39;hd3 ; assign sbox_comb [8\u0026#39;haa] \u0026lt;= 8\u0026#39;hac ; assign sbox_comb [8\u0026#39;hab] \u0026lt;= 8\u0026#39;h62 ; assign sbox_comb [8\u0026#39;hac] \u0026lt;= 8\u0026#39;h91 ; assign sbox_comb [8\u0026#39;had] \u0026lt;= 8\u0026#39;h95 ; assign sbox_comb [8\u0026#39;hae] \u0026lt;= 8\u0026#39;he4 ; assign sbox_comb [8\u0026#39;haf] \u0026lt;= 8\u0026#39;h79 ; assign sbox_comb [8\u0026#39;hb0] \u0026lt;= 8\u0026#39;he7 ; assign sbox_comb [8\u0026#39;hb1] \u0026lt;= 8\u0026#39;hc8 ; assign sbox_comb [8\u0026#39;hb2] \u0026lt;= 8\u0026#39;h37 ; assign sbox_comb [8\u0026#39;hb3] \u0026lt;= 8\u0026#39;h6d ; assign sbox_comb [8\u0026#39;hb4] \u0026lt;= 8\u0026#39;h8d ; assign sbox_comb [8\u0026#39;hb5] \u0026lt;= 8\u0026#39;hd5 ; assign sbox_comb [8\u0026#39;hb6] \u0026lt;= 8\u0026#39;h4e ; assign sbox_comb [8\u0026#39;hb7] \u0026lt;= 8\u0026#39;ha9 ; assign sbox_comb [8\u0026#39;hb8] \u0026lt;= 8\u0026#39;h6c ; assign sbox_comb [8\u0026#39;hb9] \u0026lt;= 8\u0026#39;h56 ; assign sbox_comb [8\u0026#39;hba] \u0026lt;= 8\u0026#39;hf4 ; assign sbox_comb [8\u0026#39;hbb] \u0026lt;= 8\u0026#39;hea ; assign sbox_comb [8\u0026#39;hbc] \u0026lt;= 8\u0026#39;h65 ; assign sbox_comb [8\u0026#39;hbd] \u0026lt;= 8\u0026#39;h7a ; assign sbox_comb [8\u0026#39;hbe] \u0026lt;= 8\u0026#39;hae ; assign sbox_comb [8\u0026#39;hbf] \u0026lt;= 8\u0026#39;h08 ; assign sbox_comb [8\u0026#39;hc0] \u0026lt;= 8\u0026#39;hba ; assign sbox_comb [8\u0026#39;hc1] \u0026lt;= 8\u0026#39;h78 ; assign sbox_comb [8\u0026#39;hc2] \u0026lt;= 8\u0026#39;h25 ; assign sbox_comb [8\u0026#39;hc3] \u0026lt;= 8\u0026#39;h2e ; assign sbox_comb [8\u0026#39;hc4] \u0026lt;= 8\u0026#39;h1c ; assign sbox_comb [8\u0026#39;hc5] \u0026lt;= 8\u0026#39;ha6 ; assign sbox_comb [8\u0026#39;hc6] \u0026lt;= 8\u0026#39;hb4 ; assign sbox_comb [8\u0026#39;hc7] \u0026lt;= 8\u0026#39;hc6 ; assign sbox_comb [8\u0026#39;hc8] \u0026lt;= 8\u0026#39;he8 ; assign sbox_comb [8\u0026#39;hc9] \u0026lt;= 8\u0026#39;hdd ; assign sbox_comb [8\u0026#39;hca] \u0026lt;= 8\u0026#39;h74 ; assign sbox_comb [8\u0026#39;hcb] \u0026lt;= 8\u0026#39;h1f ; assign sbox_comb [8\u0026#39;hcc] \u0026lt;= 8\u0026#39;h4b ; assign sbox_comb [8\u0026#39;hcd] \u0026lt;= 8\u0026#39;hbd ; assign sbox_comb [8\u0026#39;hce] \u0026lt;= 8\u0026#39;h8b ; assign sbox_comb [8\u0026#39;hcf] \u0026lt;= 8\u0026#39;h8a ; assign sbox_comb [8\u0026#39;hd0] \u0026lt;= 8\u0026#39;h70 ; assign sbox_comb [8\u0026#39;hd1] \u0026lt;= 8\u0026#39;h3e ; assign sbox_comb [8\u0026#39;hd2] \u0026lt;= 8\u0026#39;hb5 ; assign sbox_comb [8\u0026#39;hd3] \u0026lt;= 8\u0026#39;h66 ; assign sbox_comb [8\u0026#39;hd4] \u0026lt;= 8\u0026#39;h48 ; assign sbox_comb [8\u0026#39;hd5] \u0026lt;= 8\u0026#39;h03 ; assign sbox_comb [8\u0026#39;hd6] \u0026lt;= 8\u0026#39;hf6 ; assign sbox_comb [8\u0026#39;hd7] \u0026lt;= 8\u0026#39;h0e ; assign sbox_comb [8\u0026#39;hd8] \u0026lt;= 8\u0026#39;h61 ; assign sbox_comb [8\u0026#39;hd9] \u0026lt;= 8\u0026#39;h35 ; assign sbox_comb [8\u0026#39;hda] \u0026lt;= 8\u0026#39;h57 ; assign sbox_comb [8\u0026#39;hdb] \u0026lt;= 8\u0026#39;hb9 ; assign sbox_comb [8\u0026#39;hdc] \u0026lt;= 8\u0026#39;h86 ; assign sbox_comb [8\u0026#39;hdd] \u0026lt;= 8\u0026#39;hc1 ; assign sbox_comb [8\u0026#39;hde] \u0026lt;= 8\u0026#39;h1d ; assign sbox_comb [8\u0026#39;hdf] \u0026lt;= 8\u0026#39;h9e ; assign sbox_comb [8\u0026#39;he0] \u0026lt;= 8\u0026#39;he1 ; assign sbox_comb [8\u0026#39;he1] \u0026lt;= 8\u0026#39;hf8 ; assign sbox_comb [8\u0026#39;he2] \u0026lt;= 8\u0026#39;h98 ; assign sbox_comb [8\u0026#39;he3] \u0026lt;= 8\u0026#39;h11 ; assign sbox_comb [8\u0026#39;he4] \u0026lt;= 8\u0026#39;h69 ; assign sbox_comb [8\u0026#39;he5] \u0026lt;= 8\u0026#39;hd9 ; assign sbox_comb [8\u0026#39;he6] \u0026lt;= 8\u0026#39;h8e ; assign sbox_comb [8\u0026#39;he7] \u0026lt;= 8\u0026#39;h94 ; assign sbox_comb [8\u0026#39;he8] \u0026lt;= 8\u0026#39;h9b ; assign sbox_comb [8\u0026#39;he9] \u0026lt;= 8\u0026#39;h1e ; assign sbox_comb [8\u0026#39;hea] \u0026lt;= 8\u0026#39;h87 ; assign sbox_comb [8\u0026#39;heb] \u0026lt;= 8\u0026#39;he9 ; assign sbox_comb [8\u0026#39;hec] \u0026lt;= 8\u0026#39;hce ; assign sbox_comb [8\u0026#39;hed] \u0026lt;= 8\u0026#39;h55 ; assign sbox_comb [8\u0026#39;hee] \u0026lt;= 8\u0026#39;h28 ; assign sbox_comb [8\u0026#39;hef] \u0026lt;= 8\u0026#39;hdf ; assign sbox_comb [8\u0026#39;hf0] \u0026lt;= 8\u0026#39;h8c ; assign sbox_comb [8\u0026#39;hf1] \u0026lt;= 8\u0026#39;ha1 ; assign sbox_comb [8\u0026#39;hf2] \u0026lt;= 8\u0026#39;h89 ; assign sbox_comb [8\u0026#39;hf3] \u0026lt;= 8\u0026#39;h0d ; assign sbox_comb [8\u0026#39;hf4] \u0026lt;= 8\u0026#39;hbf ; assign sbox_comb [8\u0026#39;hf5] \u0026lt;= 8\u0026#39;he6 ; assign sbox_comb [8\u0026#39;hf6] \u0026lt;= 8\u0026#39;h42 ; assign sbox_comb [8\u0026#39;hf7] \u0026lt;= 8\u0026#39;h68 ; assign sbox_comb [8\u0026#39;hf8] \u0026lt;= 8\u0026#39;h41 ; assign sbox_comb [8\u0026#39;hf9] \u0026lt;= 8\u0026#39;h99 ; assign sbox_comb [8\u0026#39;hfa] \u0026lt;= 8\u0026#39;h2d ; assign sbox_comb [8\u0026#39;hfb] \u0026lt;= 8\u0026#39;h0f ; assign sbox_comb [8\u0026#39;hfc] \u0026lt;= 8\u0026#39;hb0 ; assign sbox_comb [8\u0026#39;hfd] \u0026lt;= 8\u0026#39;h54 ; assign sbox_comb [8\u0026#39;hfe] \u0026lt;= 8\u0026#39;hbb ; assign sbox_comb [8\u0026#39;hff] \u0026lt;= 8\u0026#39;h16 ; endmodule 轮常数 # 轮常数用于生成每一轮的密钥 常数其实可算，但设计最大16轮，直接使用查表，不做优化\nmodule rcon( input [4:0] round, output [7:0] round_const ); wire [7:0] rcon_arr[16:0]; assign round_const = rcon_arr[round]; assign rcon_arr[ 0] = 8 \u0026#39;h00; assign rcon_arr[ 1] = 8 \u0026#39;h01; assign rcon_arr[ 2] = 8 \u0026#39;h02; assign rcon_arr[ 3] = 8 \u0026#39;h04; assign rcon_arr[ 4] = 8 \u0026#39;h08; assign rcon_arr[ 5] = 8 \u0026#39;h10; assign rcon_arr[ 6] = 8 \u0026#39;h20; assign rcon_arr[ 7] = 8 \u0026#39;h40; assign rcon_arr[ 8] = 8 \u0026#39;h80; assign rcon_arr[ 9] = 8 \u0026#39;h1b; assign rcon_arr[10] = 8 \u0026#39;h36; assign rcon_arr[11] = 8 \u0026#39;h6c; assign rcon_arr[12] = 8 \u0026#39;hd8; assign rcon_arr[13] = 8 \u0026#39;hab; assign rcon_arr[14] = 8 \u0026#39;h4d; assign rcon_arr[15] = 8 \u0026#39;h9a; assign rcon_arr[16] = 8 \u0026#39;h2f; endmodule testbench搭建 # aes128参考模型 # 对于常用的算法，我们很容易就能找到其c语言代码，这里我们下载下来作为参考模型。代码如下\n模型代码 // AES only supports Nb=4 #define Nb 4\t// number of columns in the State \u0026amp; expanded key #define Nk 4\t// number of columns in a key #define Nr 12\t// number of rounds in encryption static unsigned char Sbox[256] = {\t// forward s-box 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 }; static unsigned char InvSbox[256] = {\t// inverse s-box 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d }; // combined Xtimes2[Sbox[]] static unsigned char Xtime2Sbox[256] = { 0xc6, 0xf8, 0xee, 0xf6, 0xff, 0xd6, 0xde, 0x91, 0x60, 0x02, 0xce, 0x56, 0xe7, 0xb5, 0x4d, 0xec, 0x8f, 0x1f, 0x89, 0xfa, 0xef, 0xb2, 0x8e, 0xfb, 0x41, 0xb3, 0x5f, 0x45, 0x23, 0x53, 0xe4, 0x9b, 0x75, 0xe1, 0x3d, 0x4c, 0x6c, 0x7e, 0xf5, 0x83, 0x68, 0x51, 0xd1, 0xf9, 0xe2, 0xab, 0x62, 0x2a, 0x08, 0x95, 0x46, 0x9d, 0x30, 0x37, 0x0a, 0x2f, 0x0e, 0x24, 0x1b, 0xdf, 0xcd, 0x4e, 0x7f, 0xea, 0x12, 0x1d, 0x58, 0x34, 0x36, 0xdc, 0xb4, 0x5b, 0xa4, 0x76, 0xb7, 0x7d, 0x52, 0xdd, 0x5e, 0x13, 0xa6, 0xb9, 0x00, 0xc1, 0x40, 0xe3, 0x79, 0xb6, 0xd4, 0x8d, 0x67, 0x72, 0x94, 0x98, 0xb0, 0x85, 0xbb, 0xc5, 0x4f, 0xed, 0x86, 0x9a, 0x66, 0x11, 0x8a, 0xe9, 0x04, 0xfe, 0xa0, 0x78, 0x25, 0x4b, 0xa2, 0x5d, 0x80, 0x05, 0x3f, 0x21, 0x70, 0xf1, 0x63, 0x77, 0xaf, 0x42, 0x20, 0xe5, 0xfd, 0xbf, 0x81, 0x18, 0x26, 0xc3, 0xbe, 0x35, 0x88, 0x2e, 0x93, 0x55, 0xfc, 0x7a, 0xc8, 0xba, 0x32, 0xe6, 0xc0, 0x19, 0x9e, 0xa3, 0x44, 0x54, 0x3b, 0x0b, 0x8c, 0xc7, 0x6b, 0x28, 0xa7, 0xbc, 0x16, 0xad, 0xdb, 0x64, 0x74, 0x14, 0x92, 0x0c, 0x48, 0xb8, 0x9f, 0xbd, 0x43, 0xc4, 0x39, 0x31, 0xd3, 0xf2, 0xd5, 0x8b, 0x6e, 0xda, 0x01, 0xb1, 0x9c, 0x49, 0xd8, 0xac, 0xf3, 0xcf, 0xca, 0xf4, 0x47, 0x10, 0x6f, 0xf0, 0x4a, 0x5c, 0x38, 0x57, 0x73, 0x97, 0xcb, 0xa1, 0xe8, 0x3e, 0x96, 0x61, 0x0d, 0x0f, 0xe0, 0x7c, 0x71, 0xcc, 0x90, 0x06, 0xf7, 0x1c, 0xc2, 0x6a, 0xae, 0x69, 0x17, 0x99, 0x3a, 0x27, 0xd9, 0xeb, 0x2b, 0x22, 0xd2, 0xa9, 0x07, 0x33, 0x2d, 0x3c, 0x15, 0xc9, 0x87, 0xaa, 0x50, 0xa5, 0x03, 0x59, 0x09, 0x1a, 0x65, 0xd7, 0x84, 0xd0, 0x82, 0x29, 0x5a, 0x1e, 0x7b, 0xa8, 0x6d, 0x2c }; // combined Xtimes3[Sbox[]] static unsigned char Xtime3Sbox[256] = { 0xa5, 0x84, 0x99, 0x8d, 0x0d, 0xbd, 0xb1, 0x54, 0x50, 0x03, 0xa9, 0x7d, 0x19, 0x62, 0xe6, 0x9a, 0x45, 0x9d, 0x40, 0x87, 0x15, 0xeb, 0xc9, 0x0b, 0xec, 0x67, 0xfd, 0xea, 0xbf, 0xf7, 0x96, 0x5b, 0xc2, 0x1c, 0xae, 0x6a, 0x5a, 0x41, 0x02, 0x4f, 0x5c, 0xf4, 0x34, 0x08, 0x93, 0x73, 0x53, 0x3f, 0x0c, 0x52, 0x65, 0x5e, 0x28, 0xa1, 0x0f, 0xb5, 0x09, 0x36, 0x9b, 0x3d, 0x26, 0x69, 0xcd, 0x9f, 0x1b, 0x9e, 0x74, 0x2e, 0x2d, 0xb2, 0xee, 0xfb, 0xf6, 0x4d, 0x61, 0xce, 0x7b, 0x3e, 0x71, 0x97, 0xf5, 0x68, 0x00, 0x2c, 0x60, 0x1f, 0xc8, 0xed, 0xbe, 0x46, 0xd9, 0x4b, 0xde, 0xd4, 0xe8, 0x4a, 0x6b, 0x2a, 0xe5, 0x16, 0xc5, 0xd7, 0x55, 0x94, 0xcf, 0x10, 0x06, 0x81, 0xf0, 0x44, 0xba, 0xe3, 0xf3, 0xfe, 0xc0, 0x8a, 0xad, 0xbc, 0x48, 0x04, 0xdf, 0xc1, 0x75, 0x63, 0x30, 0x1a, 0x0e, 0x6d, 0x4c, 0x14, 0x35, 0x2f, 0xe1, 0xa2, 0xcc, 0x39, 0x57, 0xf2, 0x82, 0x47, 0xac, 0xe7, 0x2b, 0x95, 0xa0, 0x98, 0xd1, 0x7f, 0x66, 0x7e, 0xab, 0x83, 0xca, 0x29, 0xd3, 0x3c, 0x79, 0xe2, 0x1d, 0x76, 0x3b, 0x56, 0x4e, 0x1e, 0xdb, 0x0a, 0x6c, 0xe4, 0x5d, 0x6e, 0xef, 0xa6, 0xa8, 0xa4, 0x37, 0x8b, 0x32, 0x43, 0x59, 0xb7, 0x8c, 0x64, 0xd2, 0xe0, 0xb4, 0xfa, 0x07, 0x25, 0xaf, 0x8e, 0xe9, 0x18, 0xd5, 0x88, 0x6f, 0x72, 0x24, 0xf1, 0xc7, 0x51, 0x23, 0x7c, 0x9c, 0x21, 0xdd, 0xdc, 0x86, 0x85, 0x90, 0x42, 0xc4, 0xaa, 0xd8, 0x05, 0x01, 0x12, 0xa3, 0x5f, 0xf9, 0xd0, 0x91, 0x58, 0x27, 0xb9, 0x38, 0x13, 0xb3, 0x33, 0xbb, 0x70, 0x89, 0xa7, 0xb6, 0x22, 0x92, 0x20, 0x49, 0xff, 0x78, 0x7a, 0x8f, 0xf8, 0x80, 0x17, 0xda, 0x31, 0xc6, 0xb8, 0xc3, 0xb0, 0x77, 0x11, 0xcb, 0xfc, 0xd6, 0x3a }; static unsigned char Xtime2[256] = { 0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e, 0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e, 0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e, 0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e, 0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e, 0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe, 0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde, 0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe, 0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05, 0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25, 0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45, 0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71, 0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65, 0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95, 0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85, 0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5, 0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5, 0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5, 0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5, 0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb, 0xe9, 0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5 }; static unsigned char Xtime9[256] = { 0x00, 0x09, 0x12, 0x1b, 0x24, 0x2d, 0x36, 0x3f, 0x48, 0x41, 0x5a, 0x53, 0x6c, 0x65, 0x7e, 0x77, 0x90, 0x99, 0x82, 0x8b, 0xb4, 0xbd, 0xa6, 0xaf, 0xd8, 0xd1, 0xca, 0xc3, 0xfc, 0xf5, 0xee, 0xe7, 0x3b, 0x32, 0x29, 0x20, 0x1f, 0x16, 0x0d, 0x04, 0x73, 0x7a, 0x61, 0x68, 0x57, 0x5e, 0x45, 0x4c, 0xab, 0xa2, 0xb9, 0xb0, 0x8f, 0x86, 0x9d, 0x94, 0xe3, 0xea, 0xf1, 0xf8, 0xc7, 0xce, 0xd5, 0xdc, 0x76, 0x7f, 0x64, 0x6d, 0x52, 0x5b, 0x40, 0x49, 0x3e, 0x37, 0x2c, 0x25, 0x1a, 0x13, 0x08, 0x01, 0xe6, 0xef, 0xf4, 0xfd, 0xc2, 0xcb, 0xd0, 0xd9, 0xae, 0xa7, 0xbc, 0xb5, 0x8a, 0x83, 0x98, 0x91, 0x4d, 0x44, 0x5f, 0x56, 0x69, 0x60, 0x7b, 0x72, 0x05, 0x0c, 0x17, 0x1e, 0x21, 0x28, 0x33, 0x3a, 0xdd, 0xd4, 0xcf, 0xc6, 0xf9, 0xf0, 0xeb, 0xe2, 0x95, 0x9c, 0x87, 0x8e, 0xb1, 0xb8, 0xa3, 0xaa, 0xec, 0xe5, 0xfe, 0xf7, 0xc8, 0xc1, 0xda, 0xd3, 0xa4, 0xad, 0xb6, 0xbf, 0x80, 0x89, 0x92, 0x9b, 0x7c, 0x75, 0x6e, 0x67, 0x58, 0x51, 0x4a, 0x43, 0x34, 0x3d, 0x26, 0x2f, 0x10, 0x19, 0x02, 0x0b, 0xd7, 0xde, 0xc5, 0xcc, 0xf3, 0xfa, 0xe1, 0xe8, 0x9f, 0x96, 0x8d, 0x84, 0xbb, 0xb2, 0xa9, 0xa0, 0x47, 0x4e, 0x55, 0x5c, 0x63, 0x6a, 0x71, 0x78, 0x0f, 0x06, 0x1d, 0x14, 0x2b, 0x22, 0x39, 0x30, 0x9a, 0x93, 0x88, 0x81, 0xbe, 0xb7, 0xac, 0xa5, 0xd2, 0xdb, 0xc0, 0xc9, 0xf6, 0xff, 0xe4, 0xed, 0x0a, 0x03, 0x18, 0x11, 0x2e, 0x27, 0x3c, 0x35, 0x42, 0x4b, 0x50, 0x59, 0x66, 0x6f, 0x74, 0x7d, 0xa1, 0xa8, 0xb3, 0xba, 0x85, 0x8c, 0x97, 0x9e, 0xe9, 0xe0, 0xfb, 0xf2, 0xcd, 0xc4, 0xdf, 0xd6, 0x31, 0x38, 0x23, 0x2a, 0x15, 0x1c, 0x07, 0x0e, 0x79, 0x70, 0x6b, 0x62, 0x5d, 0x54, 0x4f, 0x46 }; static unsigned char XtimeB[256] = { 0x00, 0x0b, 0x16, 0x1d, 0x2c, 0x27, 0x3a, 0x31, 0x58, 0x53, 0x4e, 0x45, 0x74, 0x7f, 0x62, 0x69, 0xb0, 0xbb, 0xa6, 0xad, 0x9c, 0x97, 0x8a, 0x81, 0xe8, 0xe3, 0xfe, 0xf5, 0xc4, 0xcf, 0xd2, 0xd9, 0x7b, 0x70, 0x6d, 0x66, 0x57, 0x5c, 0x41, 0x4a, 0x23, 0x28, 0x35, 0x3e, 0x0f, 0x04, 0x19, 0x12, 0xcb, 0xc0, 0xdd, 0xd6, 0xe7, 0xec, 0xf1, 0xfa, 0x93, 0x98, 0x85, 0x8e, 0xbf, 0xb4, 0xa9, 0xa2, 0xf6, 0xfd, 0xe0, 0xeb, 0xda, 0xd1, 0xcc, 0xc7, 0xae, 0xa5, 0xb8, 0xb3, 0x82, 0x89, 0x94, 0x9f, 0x46, 0x4d, 0x50, 0x5b, 0x6a, 0x61, 0x7c, 0x77, 0x1e, 0x15, 0x08, 0x03, 0x32, 0x39, 0x24, 0x2f, 0x8d, 0x86, 0x9b, 0x90, 0xa1, 0xaa, 0xb7, 0xbc, 0xd5, 0xde, 0xc3, 0xc8, 0xf9, 0xf2, 0xef, 0xe4, 0x3d, 0x36, 0x2b, 0x20, 0x11, 0x1a, 0x07, 0x0c, 0x65, 0x6e, 0x73, 0x78, 0x49, 0x42, 0x5f, 0x54, 0xf7, 0xfc, 0xe1, 0xea, 0xdb, 0xd0, 0xcd, 0xc6, 0xaf, 0xa4, 0xb9, 0xb2, 0x83, 0x88, 0x95, 0x9e, 0x47, 0x4c, 0x51, 0x5a, 0x6b, 0x60, 0x7d, 0x76, 0x1f, 0x14, 0x09, 0x02, 0x33, 0x38, 0x25, 0x2e, 0x8c, 0x87, 0x9a, 0x91, 0xa0, 0xab, 0xb6, 0xbd, 0xd4, 0xdf, 0xc2, 0xc9, 0xf8, 0xf3, 0xee, 0xe5, 0x3c, 0x37, 0x2a, 0x21, 0x10, 0x1b, 0x06, 0x0d, 0x64, 0x6f, 0x72, 0x79, 0x48, 0x43, 0x5e, 0x55, 0x01, 0x0a, 0x17, 0x1c, 0x2d, 0x26, 0x3b, 0x30, 0x59, 0x52, 0x4f, 0x44, 0x75, 0x7e, 0x63, 0x68, 0xb1, 0xba, 0xa7, 0xac, 0x9d, 0x96, 0x8b, 0x80, 0xe9, 0xe2, 0xff, 0xf4, 0xc5, 0xce, 0xd3, 0xd8, 0x7a, 0x71, 0x6c, 0x67, 0x56, 0x5d, 0x40, 0x4b, 0x22, 0x29, 0x34, 0x3f, 0x0e, 0x05, 0x18, 0x13, 0xca, 0xc1, 0xdc, 0xd7, 0xe6, 0xed, 0xf0, 0xfb, 0x92, 0x99, 0x84, 0x8f, 0xbe, 0xb5, 0xa8, 0xa3 }; static unsigned char XtimeD[256] = { 0x00, 0x0d, 0x1a, 0x17, 0x34, 0x39, 0x2e, 0x23, 0x68, 0x65, 0x72, 0x7f, 0x5c, 0x51, 0x46, 0x4b, 0xd0, 0xdd, 0xca, 0xc7, 0xe4, 0xe9, 0xfe, 0xf3, 0xb8, 0xb5, 0xa2, 0xaf, 0x8c, 0x81, 0x96, 0x9b, 0xbb, 0xb6, 0xa1, 0xac, 0x8f, 0x82, 0x95, 0x98, 0xd3, 0xde, 0xc9, 0xc4, 0xe7, 0xea, 0xfd, 0xf0, 0x6b, 0x66, 0x71, 0x7c, 0x5f, 0x52, 0x45, 0x48, 0x03, 0x0e, 0x19, 0x14, 0x37, 0x3a, 0x2d, 0x20, 0x6d, 0x60, 0x77, 0x7a, 0x59, 0x54, 0x43, 0x4e, 0x05, 0x08, 0x1f, 0x12, 0x31, 0x3c, 0x2b, 0x26, 0xbd, 0xb0, 0xa7, 0xaa, 0x89, 0x84, 0x93, 0x9e, 0xd5, 0xd8, 0xcf, 0xc2, 0xe1, 0xec, 0xfb, 0xf6, 0xd6, 0xdb, 0xcc, 0xc1, 0xe2, 0xef, 0xf8, 0xf5, 0xbe, 0xb3, 0xa4, 0xa9, 0x8a, 0x87, 0x90, 0x9d, 0x06, 0x0b, 0x1c, 0x11, 0x32, 0x3f, 0x28, 0x25, 0x6e, 0x63, 0x74, 0x79, 0x5a, 0x57, 0x40, 0x4d, 0xda, 0xd7, 0xc0, 0xcd, 0xee, 0xe3, 0xf4, 0xf9, 0xb2, 0xbf, 0xa8, 0xa5, 0x86, 0x8b, 0x9c, 0x91, 0x0a, 0x07, 0x10, 0x1d, 0x3e, 0x33, 0x24, 0x29, 0x62, 0x6f, 0x78, 0x75, 0x56, 0x5b, 0x4c, 0x41, 0x61, 0x6c, 0x7b, 0x76, 0x55, 0x58, 0x4f, 0x42, 0x09, 0x04, 0x13, 0x1e, 0x3d, 0x30, 0x27, 0x2a, 0xb1, 0xbc, 0xab, 0xa6, 0x85, 0x88, 0x9f, 0x92, 0xd9, 0xd4, 0xc3, 0xce, 0xed, 0xe0, 0xf7, 0xfa, 0xb7, 0xba, 0xad, 0xa0, 0x83, 0x8e, 0x99, 0x94, 0xdf, 0xd2, 0xc5, 0xc8, 0xeb, 0xe6, 0xf1, 0xfc, 0x67, 0x6a, 0x7d, 0x70, 0x53, 0x5e, 0x49, 0x44, 0x0f, 0x02, 0x15, 0x18, 0x3b, 0x36, 0x21, 0x2c, 0x0c, 0x01, 0x16, 0x1b, 0x38, 0x35, 0x22, 0x2f, 0x64, 0x69, 0x7e, 0x73, 0x50, 0x5d, 0x4a, 0x47, 0xdc, 0xd1, 0xc6, 0xcb, 0xe8, 0xe5, 0xf2, 0xff, 0xb4, 0xb9, 0xae, 0xa3, 0x80, 0x8d, 0x9a, 0x97 }; static unsigned char XtimeE[256] = { 0x00, 0x0e, 0x1c, 0x12, 0x38, 0x36, 0x24, 0x2a, 0x70, 0x7e, 0x6c, 0x62, 0x48, 0x46, 0x54, 0x5a, 0xe0, 0xee, 0xfc, 0xf2, 0xd8, 0xd6, 0xc4, 0xca, 0x90, 0x9e, 0x8c, 0x82, 0xa8, 0xa6, 0xb4, 0xba, 0xdb, 0xd5, 0xc7, 0xc9, 0xe3, 0xed, 0xff, 0xf1, 0xab, 0xa5, 0xb7, 0xb9, 0x93, 0x9d, 0x8f, 0x81, 0x3b, 0x35, 0x27, 0x29, 0x03, 0x0d, 0x1f, 0x11, 0x4b, 0x45, 0x57, 0x59, 0x73, 0x7d, 0x6f, 0x61, 0xad, 0xa3, 0xb1, 0xbf, 0x95, 0x9b, 0x89, 0x87, 0xdd, 0xd3, 0xc1, 0xcf, 0xe5, 0xeb, 0xf9, 0xf7, 0x4d, 0x43, 0x51, 0x5f, 0x75, 0x7b, 0x69, 0x67, 0x3d, 0x33, 0x21, 0x2f, 0x05, 0x0b, 0x19, 0x17, 0x76, 0x78, 0x6a, 0x64, 0x4e, 0x40, 0x52, 0x5c, 0x06, 0x08, 0x1a, 0x14, 0x3e, 0x30, 0x22, 0x2c, 0x96, 0x98, 0x8a, 0x84, 0xae, 0xa0, 0xb2, 0xbc, 0xe6, 0xe8, 0xfa, 0xf4, 0xde, 0xd0, 0xc2, 0xcc, 0x41, 0x4f, 0x5d, 0x53, 0x79, 0x77, 0x65, 0x6b, 0x31, 0x3f, 0x2d, 0x23, 0x09, 0x07, 0x15, 0x1b, 0xa1, 0xaf, 0xbd, 0xb3, 0x99, 0x97, 0x85, 0x8b, 0xd1, 0xdf, 0xcd, 0xc3, 0xe9, 0xe7, 0xf5, 0xfb, 0x9a, 0x94, 0x86, 0x88, 0xa2, 0xac, 0xbe, 0xb0, 0xea, 0xe4, 0xf6, 0xf8, 0xd2, 0xdc, 0xce, 0xc0, 0x7a, 0x74, 0x66, 0x68, 0x42, 0x4c, 0x5e, 0x50, 0x0a, 0x04, 0x16, 0x18, 0x32, 0x3c, 0x2e, 0x20, 0xec, 0xe2, 0xf0, 0xfe, 0xd4, 0xda, 0xc8, 0xc6, 0x9c, 0x92, 0x80, 0x8e, 0xa4, 0xaa, 0xb8, 0xb6, 0x0c, 0x02, 0x10, 0x1e, 0x34, 0x3a, 0x28, 0x26, 0x7c, 0x72, 0x60, 0x6e, 0x44, 0x4a, 0x58, 0x56, 0x37, 0x39, 0x2b, 0x25, 0x0f, 0x01, 0x13, 0x1d, 0x47, 0x49, 0x5b, 0x55, 0x7f, 0x71, 0x63, 0x6d, 0xd7, 0xd9, 0xcb, 0xc5, 0xef, 0xe1, 0xf3, 0xfd, 0xa7, 0xa9, 0xbb, 0xb5, 0x9f, 0x91, 0x83, 0x8d }; static unsigned char Rcon[17] = { 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36,0x6C,0xD8,0xAB,0x4D,0x9A,0x2F }; void ShiftRows (unsigned char *State); void InvShiftRows (unsigned char *State); // recombine and mix each row in a column void MixSubColumns (unsigned char *State); // restore and un-mix each row in a column void InvMixSubColumns (unsigned char *State); void AddRoundKey (unsigned *State, unsigned *Key); // produce Nk bytes for each round void ExpandKey (unsigned char *key, unsigned char *ExpKey); // encrypt one 128 bit block void Encrypt_AES (unsigned char *In, unsigned char *ExpKey, unsigned char *Out); void Decrypt_AES (unsigned char *In, unsigned char *ExpKey, unsigned char *Out); void ShiftRows (unsigned char *State) { unsigned char tmp; // just substitute row 0 State[0] = Sbox[State[0]], State[4] = Sbox[State[4]]; State[8] = Sbox[State[8]], State[12] = Sbox[State[12]]; // rotate row 1 tmp = Sbox[State[1]], State[1] = Sbox[State[5]]; State[5] = Sbox[State[9]], State[9] = Sbox[State[13]], State[13] = tmp; // rotate row 2 tmp = Sbox[State[2]], State[2] = Sbox[State[10]], State[10] = tmp; tmp = Sbox[State[6]], State[6] = Sbox[State[14]], State[14] = tmp; // rotate row 3 tmp = Sbox[State[15]], State[15] = Sbox[State[11]]; State[11] = Sbox[State[7]], State[7] = Sbox[State[3]], State[3] = tmp; } void InvShiftRows (unsigned char *State) { unsigned char tmp; // restore row 0 State[0] = InvSbox[State[0]], State[4] = InvSbox[State[4]]; State[8] = InvSbox[State[8]], State[12] = InvSbox[State[12]]; // restore row 1 tmp = InvSbox[State[13]], State[13] = InvSbox[State[9]]; State[9] = InvSbox[State[5]], State[5] = InvSbox[State[1]], State[1] = tmp; // restore row 2 tmp = InvSbox[State[2]], State[2] = InvSbox[State[10]], State[10] = tmp; tmp = InvSbox[State[6]], State[6] = InvSbox[State[14]], State[14] = tmp; // restore row 3 tmp = InvSbox[State[3]], State[3] = InvSbox[State[7]]; State[7] = InvSbox[State[11]], State[11] = InvSbox[State[15]], State[15] = tmp; } // recombine and mix each row in a column void MixSubColumns (unsigned char *State) { unsigned char NextState[4 * Nb]; unsigned char j; // mixing column 0 NextState[0] = Xtime2Sbox[State[0]] ^ Xtime3Sbox[State[5]] ^ Sbox[State[10]] ^ Sbox[State[15]]; NextState[1] = Sbox[State[0]] ^ Xtime2Sbox[State[5]] ^ Xtime3Sbox[State[10]] ^ Sbox[State[15]]; NextState[2] = Sbox[State[0]] ^ Sbox[State[5]] ^ Xtime2Sbox[State[10]] ^ Xtime3Sbox[State[15]]; NextState[3] = Xtime3Sbox[State[0]] ^ Sbox[State[5]] ^ Sbox[State[10]] ^ Xtime2Sbox[State[15]]; // mixing column 1 NextState[4] = Xtime2Sbox[State[4]] ^ Xtime3Sbox[State[9]] ^ Sbox[State[14]] ^ Sbox[State[3]]; NextState[5] = Sbox[State[4]] ^ Xtime2Sbox[State[9]] ^ Xtime3Sbox[State[14]] ^ Sbox[State[3]]; NextState[6] = Sbox[State[4]] ^ Sbox[State[9]] ^ Xtime2Sbox[State[14]] ^ Xtime3Sbox[State[3]]; NextState[7] = Xtime3Sbox[State[4]] ^ Sbox[State[9]] ^ Sbox[State[14]] ^ Xtime2Sbox[State[3]]; // mixing column 2 NextState[8] = Xtime2Sbox[State[8]] ^ Xtime3Sbox[State[13]] ^ Sbox[State[2]] ^ Sbox[State[7]]; NextState[9] = Sbox[State[8]] ^ Xtime2Sbox[State[13]] ^ Xtime3Sbox[State[2]] ^ Sbox[State[7]]; NextState[10] = Sbox[State[8]] ^ Sbox[State[13]] ^ Xtime2Sbox[State[2]] ^ Xtime3Sbox[State[7]]; NextState[11] = Xtime3Sbox[State[8]] ^ Sbox[State[13]] ^ Sbox[State[2]] ^ Xtime2Sbox[State[7]]; // mixing column 3 NextState[12] = Xtime2Sbox[State[12]] ^ Xtime3Sbox[State[1]] ^ Sbox[State[6]] ^ Sbox[State[11]]; NextState[13] = Sbox[State[12]] ^ Xtime2Sbox[State[1]] ^ Xtime3Sbox[State[6]] ^ Sbox[State[11]]; NextState[14] = Sbox[State[12]] ^ Sbox[State[1]] ^ Xtime2Sbox[State[6]] ^ Xtime3Sbox[State[11]]; NextState[15] = Xtime3Sbox[State[12]] ^ Sbox[State[1]] ^ Sbox[State[6]] ^ Xtime2Sbox[State[11]]; for(j=0;j\u0026lt;sizeof(NextState);j++) { *(State+j)=*(NextState+j); } } // restore and un-mix each row in a column void InvMixSubColumns (unsigned char *State) { unsigned char NextState[4 * Nb]; int i; // restore column 0 NextState[0] = XtimeE[State[0]] ^ XtimeB[State[1]] ^ XtimeD[State[2]] ^ Xtime9[State[3]]; NextState[5] = Xtime9[State[0]] ^ XtimeE[State[1]] ^ XtimeB[State[2]] ^ XtimeD[State[3]]; NextState[10] = XtimeD[State[0]] ^ Xtime9[State[1]] ^ XtimeE[State[2]] ^ XtimeB[State[3]]; NextState[15] = XtimeB[State[0]] ^ XtimeD[State[1]] ^ Xtime9[State[2]] ^ XtimeE[State[3]]; // restore column 1 NextState[4] = XtimeE[State[4]] ^ XtimeB[State[5]] ^ XtimeD[State[6]] ^ Xtime9[State[7]]; NextState[9] = Xtime9[State[4]] ^ XtimeE[State[5]] ^ XtimeB[State[6]] ^ XtimeD[State[7]]; NextState[14] = XtimeD[State[4]] ^ Xtime9[State[5]] ^ XtimeE[State[6]] ^ XtimeB[State[7]]; NextState[3] = XtimeB[State[4]] ^ XtimeD[State[5]] ^ Xtime9[State[6]] ^ XtimeE[State[7]]; // restore column 2 NextState[8] = XtimeE[State[8]] ^ XtimeB[State[9]] ^ XtimeD[State[10]] ^ Xtime9[State[11]]; NextState[13] = Xtime9[State[8]] ^ XtimeE[State[9]] ^ XtimeB[State[10]] ^ XtimeD[State[11]]; NextState[2] = XtimeD[State[8]] ^ Xtime9[State[9]] ^ XtimeE[State[10]] ^ XtimeB[State[11]]; NextState[7] = XtimeB[State[8]] ^ XtimeD[State[9]] ^ Xtime9[State[10]] ^ XtimeE[State[11]]; // restore column 3 NextState[12] = XtimeE[State[12]] ^ XtimeB[State[13]] ^ XtimeD[State[14]] ^ Xtime9[State[15]]; NextState[1] = Xtime9[State[12]] ^ XtimeE[State[13]] ^ XtimeB[State[14]] ^ XtimeD[State[15]]; NextState[6] = XtimeD[State[12]] ^ Xtime9[State[13]] ^ XtimeE[State[14]] ^ XtimeB[State[15]]; NextState[11] = XtimeB[State[12]] ^ XtimeD[State[13]] ^ Xtime9[State[14]] ^ XtimeE[State[15]]; for( i=0; i \u0026lt; 4 * Nb; i++ ) { State[i] = InvSbox[NextState[i]]; } } void AddRoundKey (unsigned *State, unsigned *Key) { int i; for( i = 0; i \u0026lt; 4; i++ ) { State[i] ^= Key[i]; } } // produce Nk bytes for each round void ExpandKey (unsigned char *key, unsigned char *ExpKey) { unsigned char tmp0, tmp1, tmp2, tmp3, tmp4; unsigned idx; for( idx = 0; idx \u0026lt; Nk; idx++ ) { ExpKey[4*idx+0] = key[4 * idx + 0]; ExpKey[4*idx+1] = key[4 * idx + 1]; ExpKey[4*idx+2] = key[4 * idx + 2]; ExpKey[4*idx+3] = key[4 * idx + 3]; } for( idx = Nk; idx \u0026lt; Nb * (Nr + 1); idx++ ) { tmp0 = ExpKey[4*idx - 4]; tmp1 = ExpKey[4*idx - 3]; tmp2 = ExpKey[4*idx - 2]; tmp3 = ExpKey[4*idx - 1]; if( !(idx % Nk) ) { tmp4 = tmp3; tmp3 = Sbox[tmp0]; tmp0 = Sbox[tmp1] ^ Rcon[idx/Nk]; tmp1 = Sbox[tmp2]; tmp2 = Sbox[tmp4]; } // convert from longs to bytes ExpKey[4*idx+0] = ExpKey[4*idx - 4*Nk + 0] ^ tmp0; ExpKey[4*idx+1] = ExpKey[4*idx - 4*Nk + 1] ^ tmp1; ExpKey[4*idx+2] = ExpKey[4*idx - 4*Nk + 2] ^ tmp2; ExpKey[4*idx+3] = ExpKey[4*idx - 4*Nk + 3] ^ tmp3; } } // encrypt one 128 bit block void Encrypt_AES (unsigned char *In, unsigned char *ExpKey, unsigned char *Out) { unsigned round, idx; unsigned char State[Nb * 4]; for( idx = 0; idx \u0026lt; Nb; idx++ ) { State[4*idx+0] = *In++; State[4*idx+1] = *In++; State[4*idx+2] = *In++; State[4*idx+3] = *In++; } AddRoundKey ((unsigned *)State, (unsigned *)ExpKey); for( round = 1; round \u0026lt; Nr + 1; round++ ) { if( round \u0026lt; Nr ) MixSubColumns (State); else ShiftRows (State); AddRoundKey ((unsigned *)State, (unsigned *)ExpKey + round * Nb); } for( idx = 0; idx \u0026lt; Nb; idx++ ) { *Out++ = State[4*idx+0]; *Out++ = State[4*idx+1]; *Out++ = State[4*idx+2]; *Out++ = State[4*idx+3]; } } void Decrypt_AES (unsigned char *In, unsigned char *ExpKey, unsigned char *Out) { unsigned idx, round; unsigned char State[Nb * 4]; for( idx = 0; idx \u0026lt; Nb; idx++ ) { State[4*idx+0] = *In++; State[4*idx+1] = *In++; State[4*idx+2] = *In++; State[4*idx+3] = *In++; } AddRoundKey ((unsigned *)State, (unsigned *)ExpKey + Nr * Nb); round = Nr; InvShiftRows(State); while( round-- ) { AddRoundKey ((unsigned *)State, (unsigned *)ExpKey + round * Nb); if( round ) InvMixSubColumns (State); } for( idx = 0; idx \u0026lt; Nb; idx++ ) { *Out++ = State[4*idx+0]; *Out++ = State[4*idx+1]; *Out++ = State[4*idx+2]; *Out++ = State[4*idx+3]; } } 综合过程 # 时序报告 # 面积报告 # 总结 # "},{"id":6,"href":"/docs/posts/","title":"个人博客","section":"Docs","content":"hello world\n"},{"id":7,"href":"/posts/","title":"学习记录","section":"Introduction","content":"hello world\n"}]